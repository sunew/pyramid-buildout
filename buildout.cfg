[buildout]
extensions +=
    mr.developer
    buildout.umask

umask = 002
# avoid common egg cache for this project
eggs-directory = ${buildout:directory}/eggs

# todo: a normal versions.cfg?
extends =
    pinned_versions.cfg
versions = versions
show-picked-versions = true
update-versions-file = pinned_versions.cfg

newest = false

always-checkout = force
# external sources pulled by mr.developer, are kept in mr-developer-src/ and ignored by git.
sources-dir = mr-developer-src

parts =
    pyramid
    dev-inifile
    prod-inifile
    eggdeps
    ipy
    yolk
    omelette
    test

eggs =
    ZopeSkel
    ipdb

# sources in src are living in the same git repository as this buildout.
develop =
    src/testproject

allow-hosts =
    *.python.org

auto-checkout =

[sources]
# Examples:
# collective.cachepurger  = svn https://svn.headnet.dk/shiny/collective.cachepurger/trunk/
# collective.cachepurger  = svn https://svn.headnet.dk/shiny/collective.cachepurger/trunk/@123
# Plone                   = git ${remotes:plone}/Plone.git branch=4.1
# Plone                   = git ${remotes:plone}/Plone.git rev=TAG
#
# Example with pushurl - needed to be able to check out read only by non-collective user (a machine user).
# collective.pfgpreview       = git ${remotes:collective}/collective.pfgpreview.git pushurl=${remotes:collective_push}/collective.pfgpreview.git


[hosts]
local_host = 127.0.0.1
local_port = 8081

prod_host = 127.0.0.1
prod_port = 8081


[pyramid]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    ipdb
    Paste
    pyramid
    testproject
interpreter = py


[dev-inifile]
recipe = collective.recipe.template
input = ${buildout:directory}/development.ini.in
output = ${buildout:directory}/development.ini


[prod-inifile]
recipe = collective.recipe.template
input = ${buildout:directory}/production.ini.in
output = ${buildout:directory}/production.ini


[eggdeps]
recipe = zc.recipe.egg
eggs = tl.eggdeps
       ${buildout:eggs}
       ${pyramid:eggs}
scripts = eggdeps


[ipy]
# a IPython Shell for interactive use with the eggs from your buildout available
recipe = zc.recipe.egg
eggs =
       ipython
       ${buildout:eggs}
       ${pyramid:eggs}
initialization =
        import sys, os
        # buildout is contained in a virtualenv:
        os.environ["IPYTHONDIR"] = "${buildout:directory}/.ipython"
scripts = ipython=ipy


[yolk]
recipe = zc.recipe.egg
eggs =
       yolk
       ${buildout:eggs}
       ${pyramid:eggs}
initialization = import os; os.environ['HOME']='${buildout:directory}'
scripts = yolk

[omelette]
recipe = collective.recipe.omelette
eggs =
       ${buildout:eggs}
       ${pyramid:eggs}

[test]
recipe = zc.recipe.testrunner
eggs =
       ${buildout:eggs}
       ${pyramid:eggs}


